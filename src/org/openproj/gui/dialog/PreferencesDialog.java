/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.openproj.gui.dialog;

import com.projity.preference.GlobalPreferences;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;

/**
 *
 * @author Paul
 */
public class PreferencesDialog
	extends javax.swing.JDialog
{
	/**
	 * Creates new form PreferencesDialog
	 */
	public PreferencesDialog( 
		final java.awt.Frame _parent,
		final boolean _modal )
	{
		super( _parent, _modal );
		myPreferences = GlobalPreferences.getInstance();
		initComponents();

		JRootPane rootPane = getRootPane();
		
		// register for the ESC key
		rootPane.registerKeyboardAction( new ActionListener()
		{
			@Override
			public void actionPerformed( 
				final ActionEvent _actionEvent )
			{
				cancelButtonActionPerformed( null );
			}
		}, KeyStroke.getKeyStroke( KeyEvent.VK_ESCAPE, 0 ), JComponent.WHEN_IN_FOCUSED_WINDOW );
		
		// register for the ENTER key
		rootPane.registerKeyboardAction( new ActionListener()
		{
			@Override
			public void actionPerformed( 
				final ActionEvent _actionEvent )
			{
				okayButtonActionPerformed( null );
			}
		}, KeyStroke.getKeyStroke( KeyEvent.VK_ENTER, 0 ), JComponent.WHEN_IN_FOCUSED_WINDOW );
		
		// register for the F1 (help) key
		rootPane.registerKeyboardAction( new ActionListener()
		{
			@Override
			public void actionPerformed( 
				final ActionEvent _actionEvent )
			{
				// display help here
			}
		}, KeyStroke.getKeyStroke( KeyEvent.VK_F1, 0 ), JComponent.WHEN_IN_FOCUSED_WINDOW );

		switch (myPreferences.getTimeDisplay())
		{
		case AM_PM:
			radioAmPm.setSelected( true );
			break;
			
		case MILITARY:
			radio24hour.setSelected( true );
			break;
		}
	}


	
	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
	 * this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groupTimeFormat = new javax.swing.ButtonGroup();
        tabbedPane = new javax.swing.JTabbedPane();
        dateAndTimePanel = new javax.swing.JPanel();
        radioAmPm = new javax.swing.JRadioButton();
        radio24hour = new javax.swing.JRadioButton();
        buttonPanel = new javax.swing.JPanel();
        okayButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Preferences");

        groupTimeFormat.add(radioAmPm);
        radioAmPm.setText("AM/PM");
        radioAmPm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioAmPmActionPerformed(evt);
            }
        });

        groupTimeFormat.add(radio24hour);
        radio24hour.setText("24 hours");

        javax.swing.GroupLayout dateAndTimePanelLayout = new javax.swing.GroupLayout(dateAndTimePanel);
        dateAndTimePanel.setLayout(dateAndTimePanelLayout);
        dateAndTimePanelLayout.setHorizontalGroup(
            dateAndTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dateAndTimePanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(dateAndTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radio24hour)
                    .addComponent(radioAmPm))
                .addContainerGap(311, Short.MAX_VALUE))
        );
        dateAndTimePanelLayout.setVerticalGroup(
            dateAndTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dateAndTimePanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(radioAmPm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radio24hour)
                .addContainerGap(222, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Date and Time", dateAndTimePanel);

        getContentPane().add(tabbedPane, java.awt.BorderLayout.CENTER);

        buttonPanel.setPreferredSize(new java.awt.Dimension(400, 40));

        okayButton.setText("OK");
        okayButton.setName("");
        okayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okayButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap(245, Short.MAX_VALUE)
                .addComponent(okayButton)
                .addGap(18, 18, 18)
                .addComponent(cancelButton)
                .addGap(25, 25, 25))
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okayButton)
                    .addComponent(cancelButton))
                .addGap(28, 28, 28))
        );

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void cancelButtonActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_cancelButtonActionPerformed
	{//GEN-HEADEREND:event_cancelButtonActionPerformed
		setVisible( false );
	}//GEN-LAST:event_cancelButtonActionPerformed

	private void okayButtonActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_okayButtonActionPerformed
	{//GEN-HEADEREND:event_okayButtonActionPerformed
		if (radioAmPm.isSelected() == true)
		{
			myPreferences.setTimeDisplay( GlobalPreferences.TimeDisplay.AM_PM );
		}
		else if (radio24hour.isSelected() == true)
		{
			myPreferences.setTimeDisplay( GlobalPreferences.TimeDisplay.MILITARY );
		}
		
		// fire update event
		myPreferences.fireUpdateEvent( this, myPreferences );
		
		setVisible( false );
	}//GEN-LAST:event_okayButtonActionPerformed

	private void radioAmPmActionPerformed( java.awt.event.ActionEvent evt )//GEN-FIRST:event_radioAmPmActionPerformed
	{//GEN-HEADEREND:event_radioAmPmActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_radioAmPmActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main( String args[] )
	{
		/*
		 * Set the Nimbus look and feel
		 */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try
		{
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
			{
				if ("Nimbus".equals( info.getName() ))
				{
					javax.swing.UIManager.setLookAndFeel( info.getClassName() );
					break;
				}
			}
		}
		catch (ClassNotFoundException ex)
		{
			java.util.logging.Logger.getLogger( PreferencesDialog.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
		}
		catch (InstantiationException ex)
		{
			java.util.logging.Logger.getLogger( PreferencesDialog.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
		}
		catch (IllegalAccessException ex)
		{
			java.util.logging.Logger.getLogger( PreferencesDialog.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
		}
		catch (javax.swing.UnsupportedLookAndFeelException ex)
		{
			java.util.logging.Logger.getLogger( PreferencesDialog.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
		}
		//</editor-fold>

		/*
		 * Create and display the dialog
		 */
		java.awt.EventQueue.invokeLater( new Runnable()
		{

			@Override
			public void run()
			{
				PreferencesDialog dialog = new PreferencesDialog( new javax.swing.JFrame(), true );
				dialog.addWindowListener( new java.awt.event.WindowAdapter()
				{
					@Override
					public void windowClosing( java.awt.event.WindowEvent e )
					{
						System.exit( 0 );
					}
				} );
				dialog.setVisible( true );
			}
		} );
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel dateAndTimePanel;
    private javax.swing.ButtonGroup groupTimeFormat;
    private javax.swing.JButton okayButton;
    private javax.swing.JRadioButton radio24hour;
    private javax.swing.JRadioButton radioAmPm;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables

	private GlobalPreferences myPreferences;
}
